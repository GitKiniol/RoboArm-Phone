Build1=Default,b4a.example
File1=AppIcon.png
File10=phoneicon2d.png
File11=Question.png
File12=ramierobota2d.png
File13=RunJob.png
File14=SearchBtIco.png
File15=SendIcon.png
File16=splashscreen.bal
File17=SplashScreen.png
File18=StopJob.png
File19=TaskScreen.bal
File2=bluetoothadaptericon.png
File20=TaskScreenIco.png
File21=Warning.png
File22=wireleft.png
File23=wireright.png
File3=ConnectScreen.bal
File4=DefaultButtonImage.png
File5=DriverConnectIco.png
File6=DriverDisConnectIco.png
File7=Error.png
File8=information.png
File9=JobScreen.bal
FileGroup1=Default Group
FileGroup10=Default Group
FileGroup11=Default Group
FileGroup12=Default Group
FileGroup13=Default Group
FileGroup14=Default Group
FileGroup15=Default Group
FileGroup16=Default Group
FileGroup17=Default Group
FileGroup18=Default Group
FileGroup19=Default Group
FileGroup2=Default Group
FileGroup20=Default Group
FileGroup21=Default Group
FileGroup22=Default Group
FileGroup23=Default Group
FileGroup3=Default Group
FileGroup4=Default Group
FileGroup5=Default Group
FileGroup6=Default Group
FileGroup7=Default Group
FileGroup8=Default Group
FileGroup9=Default Group
Group=Default Group
Library1=core
Library2=serial
Library3=xui
Library4=randomaccessfile
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: https://www.b4x.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="14" android:targetSdkVersion="29"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~CreateResourceFromFile(Macro, Themes.LightTheme)~\n~'End of default text.~\n~
Module1=AsyncStreamsText
Module2=DataGridView
Module3=ImageButton
Module4=Starter
Module5=USART
NumberOfFiles=23
NumberOfLibraries=4
NumberOfModules=5
Version=11.2
@EndOfDesignText@
#Region  Project Attributes 
	#ApplicationLabel: RoboArm
	#VersionCode: 1
	#VersionName: 
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: portrait
	#CanInstallToExternalStorage: False
	#BridgeLogger: True
#End Region

#Region  Activity Attributes 
	#FullScreen: False
	#IncludeTitle: True
#End Region

Sub Process_Globals
	'These global variables will be declared once when the application starts.
	'These variables can be accessed from all modules.
	Private xui As XUI
	Private Bluetooth As USART																'bluetooth
	Private AutoSwitchScreenTimer As Timer													'timer odlicza czas trwania splash screena i przełacza na ekran nawiązywania połączenia
	
End Sub

Sub Globals
	'These global variables will be redeclared each time the activity is created.
	
	Private BtAdapterIcon As ImageView														'obrazek adaptera bluetooth
	Private PhoneIcon As ImageView															'obrazek telefonu
	Private RobotIcon As ImageView															'obrazek robota
	Private WireLeftIcon As ImageView														'obrazek kabla z wtyczką po lewej stronie
	Private WireRightIcon As ImageView														'obrazek kabla z wtyczką po prawej stronie
	
	Private BtConnectButton As ImageButton													'przycisk wyszukiwania i ustanawiania połączenia z adapterem bluetooth
	Private DriverConnectButton As ImageButton												'przycisk połączenia ze sterownikiem
	Private DriverDisConnectButton As ImageButton											'przycisk do odłączania sterownika
	Private TaskSetupButton As ImageButton													'przełączenie na ekran ustawień parametrów ruchu
	
	Private AcisCLabel As Label
	Private AddToTaskSequenceButton As Button
	Private AxisACheckBox As CheckBox
	Private AxisALabel As Label
	Private AxisASeekBar As SeekBar
	Private AxisAValue As Label
	Private AxisBCheckBox As CheckBox
	Private AxisBLabel As Label
	Private AxisBSeekBar As SeekBar
	Private AxisBValue As Label
	Private AxisCCheckBox As CheckBox
	Private AxisCSeekBar As SeekBar
	Private AxisCValue As Label
	Private AxisGCheckBox As CheckBox
	Private AxisGLabel As Label
	Private AxisGSeekBar As SeekBar
	Private AxisGValue As Label
	Private AxisMovesDataGrid As DataGridView
	Private AxisTCheckBox As CheckBox
	Private AxisTLabel As Label
	Private AxisTSeekBar As SeekBar
	Private AxisTValue As Label
	Private AxisZCheckBox As CheckBox
	Private AxisZLabel As Label
	Private AxisZSeekBar As SeekBar
	Private AxisZValue As Label
	Private JobScreenButton As Button
	Private SendTaskButton As Button
	Private SpeedLabel As Label
	Private SpeedSeekBar As SeekBar
	Private SpeedValue As Label
	
	Private SendRowIndex = 0 As Int															'indeks wysyłenego wiersza tabeli
	Private SendTaskSequenceIndex = 0 As Int												'indeks wysyłanej sekwenci zadń
	Private OldBlend As String																'poprzednia wartść miksowania
	Private IsTaskSending = False As Boolean												'czy trwa wysyłanie zadań
	Private IsTaskSequenceSending = False As Boolean										'czy trwa wysyłanie sekwencji zadań
	
	Private TaskSequence As Map																'praca dla robota(praca to sekwencja zadań, może się składać z jednego lub więcej Tasków)
	Private TaskSequenceIndex = 1 As Int													'index sekwencji zadań

	Private BackButton As ImageButton
	Private TaskSequenceProgress As ProgressBar
	Private TaskSequenceListView As ListView
	Private SendTaskSequenceButton As ImageButton

	Private RunJobButton As ImageButton
	Private StopJobButton As ImageButton
	
End Sub

Sub Activity_Create(FirstTime As Boolean)
	
	Bluetooth.Initialize(Me, "BluetoothEvent")												'inicjalizacja bluetooth
	AutoSwitchScreenTimer.Initialize("SwitchScreenTimer", 1000)								'incjalizacja timera prełączającego SplashScreen na ConnectScreen
	AutoSwitchScreenTimer.Enabled = True													'uruchomienie timera
	Activity.LoadLayout("SplashScreen")														'ekran powitalny
	
End Sub

Sub Activity_Resume
	
	Bluetooth.Run																			'uruchomienie bluetooth

End Sub

Sub Activity_Pause (UserClosed As Boolean)

End Sub

Sub SwitchScreenTimer_Tick
	
	AutoSwitchScreenTimer.Enabled = False													'zatrzymanie timera
	Activity.RemoveAllViews																	'usunięcie wyświetlanych elementów
	Activity.LoadLayout("ConnectScreen")													'załaduj ekran nawiązywania połączenia
	BtConnectButton.SetImage(LoadBitmap(File.DirAssets, "SearchBtIco.png"))					'ustawienie ikony przycisku połączenie z bt
	DriverConnectButton.SetImage(LoadBitmap(File.DirAssets, "DriverConnectIco.png"))		'ustawienie ikony przycisku połaczenia ze sterownikiem
	DriverDisConnectButton.SetImage(LoadBitmap(File.DirAssets, "DriverDisConnectIco.png"))	'ustawienie ikony przycisku odłączania od sterownika
	TaskSetupButton.SetImage(LoadBitmap(File.DirAssets, "TaskScreenIco.png"))				'ustawienie ikony przycisku przełączającego na ekran ustawień parametrów ruchu osi
	
	DriverConnectButton.Disable																'zablokowanie przycisku "PodłączSterownik"
	DriverDisConnectButton.Disable															'zablokowanie przycisku "OdłączSterownik"
	'TaskSetupButton.Disable																	'zablokowanie przycisku "Ekran Parametrów"
	 
	
End Sub

#Region ConnectScreen

Private Sub TaskSetupButton_Click
	
	ShowTaskScreen
	
End Sub

Private Sub DriverDisConnectButton_Click
	
	Bluetooth.SendStatusFrame("3")															'wyślij żądanie rozłączenia
	
End Sub

Private Sub DriverConnectButton_Click
	
	Bluetooth.SendStatusFrame("2")															'wyśli żądanie połączenia
	ProgressDialogShow("Nawiązywanie połaczenia ze sterownikiem.")							'okno postępu łączenia ze strownikiem
	
End Sub

Private Sub BtConnectButton_Click
	
	BtConnectButton.Disable																	'zablokuj przycisk wyszukiwania urządzeń bluetooth
	Bluetooth.Serch																			'rozpocznij poszukiwania urządzeń
	ProgressDialogShow("Zrywanie połaczenia ze sterownikiem.")								'okno postępu odłącania od strownikia
	
End Sub

#End Region

#Region TaskScreen

Private Sub ShowTaskScreen
	
	Activity.RemoveAllViews																		'usunięcie wyświetlanych elementów
	Activity.LoadLayout("TaskScreen")															'załaduj ekran ustawień parametrow ruchu
	
End Sub

Private Sub InsertAngleToLabel(Angle As String, AxisLeter As String)
	
	For Each ViewElement In Activity.GetAllViewsRecursive										'przeszukaj wszystkie elementy na ekranie
		If ViewElement Is Label Then															'jeśli badany element jest typu Label to:
			Dim lv = ViewElement As Label														'zapisz ten element w zmiennej
			If lv.Tag == "lv" & AxisLeter Then													'jesli tag elementu zgadza się z tagiem sendera to:
				lv.Text = Angle & "°"															'wpisz wartość kąta do labelki
			End If
		End If
	Next
	
End Sub

Private Sub InsertAngleToDataGrid(AxisLeter As String)
	
	Dim AngleFromLabel As Int
	Dim AxisDir As Int
	
	For Each ViewElement In Activity.GetAllViewsRecursive										'przeszukaj wszystkie elementy na ekranie
		If ViewElement Is Label Then															'jeśli badany element jest typu Label to:
			Dim lv = ViewElement As Label														'zapisz ten emement w zmiennej
			If lv.Tag == "lv" & AxisLeter Then													'jesli tag elementu zgadza się z tagiem parametru to:
				AngleFromLabel = lv.Text.Replace("°","")										'przepisz wartość kąta z labelki do zmiennej
			End If
		End If
	Next
	
	If AngleFromLabel >= 0 Then																	'jeśli wartość kąta większa lub równa 0 to:
		AxisDir = 0																				'ustaw prawy kierunek obrotów
		AxisMovesDataGrid.SetItemValue(AxisLeter, "Angle", AngleFromLabel)						'wstaw kąt osi do tabeli
		Else																					'w przeciwnym razie:
		AxisDir = 1																				'ustaw lewy kierunek obrotów
		AxisMovesDataGrid.SetItemValue(AxisLeter, "Angle", (AngleFromLabel * -1))				'wstaw kąt osi do tabeli
	End If
	
	AxisMovesDataGrid.SetItemValue(AxisLeter, "Dir", AxisDir)									'wstaw kierunek osi do tabeli
	
End Sub

Private Sub SendTask(DataTable As Map) As String
	
	Dim Row As Map																					'dane wiersza tabeli
	
	Row = DataTable.GetValueAt(SendRowIndex)
	Dim Blend = Row.Get("Blend") As String
		
	If Blend == "true" And SendRowIndex < DataTable.Size - 1 Then
		Log("Send TASK")
		Bluetooth.SendWorkFrame("TASK", Row)
	End If
		
	If Blend == "true" And SendRowIndex == DataTable.Size - 1 And Blend == OldBlend Then
		Log("Send ETASK")
		Bluetooth.SendWorkFrame("ETASK", Row)
	End If
		
	If Blend == "true" And SendRowIndex == DataTable.Size - 1 And Blend <> OldBlend Then
		Log("Send MOVE")
		Bluetooth.SendWorkFrame("MOVE", Row)
	End If
		
	If Blend == "false" And (Blend == OldBlend Or SendRowIndex == 0) Then
		Log("Send MOVE")
		Bluetooth.SendWorkFrame("MOVE", Row)
	End If
		
	If Blend == "false" And Blend <> OldBlend And SendRowIndex > 0 Then
		Log("Send ETASK")
		Bluetooth.SendWorkFrame("ETASK", Row)
	End If
	Return Blend
	
End Sub

Private Sub SendTaskButton_Click
	
	IsTaskSending = True																		'zainicjowano wysyłanie danych
	Bluetooth.SendStatusFrame("1")																'wysłanie rządania podania statusu(inicjowanie komunikacji)
	ProgressDialogShow("Wysyłanie danych do sterownika...")										'okno postępu wysyłania
	
End Sub

Private Sub AddToTaskSequenceButton_Click
	
	CreateTaskSequence																			'utworzenie sekwencji zadań
	
End Sub

Private Sub JobScreenButton_Click
	
	ShowJobScreen																				'wyświetl eran JobScreen
	
End Sub


Private Sub AxisSeekBar_ValueChanged (Value As Int, UserChanged As Boolean)
	
	Dim AxisSeekBar = Sender As SeekBar															'obiekt wywołujący zdarzenie
	Dim AxisName = AxisSeekBar.Tag As String													'litera osi pobrana z tagu
	AxisName = AxisName.SubString(3)
	Dim AxisValue As Int																		'wartość suwaka kąta osi
	
	For Each ViewElement In Activity.GetAllViewsRecursive										'przeszukaj wszystkie elementy na ekranie
		If ViewElement Is SeekBar Then															'jeśli badany element jest typu SeekBar to:
			Dim sb = ViewElement As SeekBar														'zapisz ten element w zmiennej
			If sb.Tag == "sbv" & AxisName Then													'jesli tag elementu zgadza się z tagiem sendera to:
				AxisValue = sb.Value + (-90)													'oblicz kąt
			End If
		End If
	Next
	
	InsertAngleToLabel(AxisValue, AxisName)														'wstawienie wartości kąta do odpowiedniej labelki
	InsertAngleToDataGrid(AxisName)																'wstawianie kąta osi do tabeli
	
End Sub

Private Sub AxisCheckBox_CheckedChange(Checked As Boolean)
	
	Dim AxisCheckBox = Sender As CheckBox														'obiekt wywołujący zdarzenie
	Dim AxisName = AxisCheckBox.Tag As String													'litera osi pobrana z tagu
	Dim AxisAngle = 0 As Int																	'kąt osi
	Dim AxisDir  = 0 As Int																		'kierunek osi
	Dim DataForRow As List																		'lista danych dla wiersza
	DataForRow.Initialize																		'inicjalizacja listy
	
	If AxisMovesDataGrid.IsRowExist("Oś " & AxisName) == False Then								'jeśli wiersza jeszcze nie ma to:
		DataForRow.Add("Oś " & AxisName)														'dodaj nazwę osi do listy
		DataForRow.Add(AxisAngle)																'dodaj kąt osi do listy
		DataForRow.Add(SpeedSeekBar.Value)														'dodaj prędkość osi do listy
		DataForRow.Add(AxisDir)																	'dodaj kierunek osi do listy
		DataForRow.Add("1")																		'dodaj informację ołączeniu ruchów do listy
		AxisMovesDataGrid.InsertRow(DataForRow)													'wstaw wiersz
	Else																						'jeśli wiersz istnieje to:
		AxisMovesDataGrid.DeleteRow(AxisName)													'usuń wiersz
	End If
	
	InsertAngleToDataGrid(AxisName)																'wstaw kąt osi do tabeli
	
End Sub

Private Sub SpeedSeekBar_ValueChanged (Value As Int, UserChanged As Boolean)
	
	AxisMovesDataGrid.SetItemValue("Z", "Speed", Value)											'wtawienie prędkości osi Z Do tabeli
	AxisMovesDataGrid.SetItemValue("A", "Speed", Value)											'wtawienie prędkości osi A Do tabeli
	AxisMovesDataGrid.SetItemValue("B", "Speed", Value)											'wtawienie prędkości osi B Do tabeli
	AxisMovesDataGrid.SetItemValue("C", "Speed", Value)											'wtawienie prędkości osi C  Do tabeli
	AxisMovesDataGrid.SetItemValue("G", "Speed", Value)											'wtawienie prędkości osi G  Do tabeli
	AxisMovesDataGrid.SetItemValue("T", "Speed", Value)											'wtawienie prędkości osi T Do tabeli
	
End Sub

#End Region

#Region USART Events

Private Sub BluetoothEvent_DataAck
																						
	If IsTaskSending Then																				'jeśli zainicjalizowano wysylanie zadań,to:	
		Dim TaskTab = AxisMovesDataGrid.GetTable As Map													'pobranie wszystkich danych z tabeli
		If TaskTab.Size > 0 Then																		'jeśli tabela zawiera dane, to:
			OldBlend = SendTask(TaskTab)																'wyślij dane i zwróć informacje o miksowaniau ruchów
			SendRowIndex = SendRowIndex + 1																'inkrementacja indexu wysyłanengo wiersza
			
			If SendRowIndex == TaskTab.Size Then														'jeśli index wiersza równy liczbie elementów tablicy, to:
				IsTaskSending = False																	'zerowanie flagi informującej o wysyłaniu zadania
				SendRowIndex = 0																		'ustawienie indexu wiersza na 0
				OldBlend = ""																			'czyszczenie informacji o miksowaniu ruchów
				ProgressDialogHide																		'zamknięcie okna postępu wysyłania
				Bluetooth.InfoWindow("Dane wyłane poprawnie.")											'wyświetlanie okna informacyjnego o poprawnym zakończeniu wysyłania
			End If
		Else																							'jeśli tabela nie zawiera żadnych danych, to:
			Bluetooth.WarningWindow("Brak danych do wysłania.")											'wyświetl okno ostrzegające o braku danych do wysłania
		End If
	End If
	
	If IsTaskSequenceSending Then																		'jeśli zainicjowano wysyłanie sekwencji zadań, to:
		Dim TaskFromJob = TaskSequenceListView.GetItem(SendTaskSequenceIndex) As Map					'pobranie zadania z listy sekwencji zadań
		If TaskFromJob.Size > 0 Then																	'jeśli tabeli zawiera dane, to:
			OldBlend = SendTask(TaskFromJob)															'wyślij dane i zwróć informacje o miksowaniau ruchów
			SendRowIndex = SendRowIndex + 1																'inkrementacja indexu wysyłanengo wiersza
			
			If SendRowIndex == TaskFromJob.Size Then													'jeśli index wiersza równy liczbie elementów tablicy, to:
				SendRowIndex = 0																		'ustawienie indexu wiersza na 0
				OldBlend = ""																			'czyszczenie informacji o miksowaniu ruchów
				SendTaskSequenceIndex = SendTaskSequenceIndex + 1										'Inkrementacja indexu pracy
			End If
			If SendTaskSequenceIndex == TaskSequenceListView.Size Then									'jeśli index sekwencji zadań równy ilości sekwencji zadań na liście, to:
				ProgressDialogHide																		'zamknięcie okna postępu wysyłania
				Bluetooth.InfoWindow("Dane wyłane poprawnie.")											'wyświetlanie okna informacyjnego o poprawnym zakończeniu wysyłania
				SendTaskSequenceIndex = 0																'zerowanie indexu wierszy sekwencji zadań
				IsTaskSequenceSending = False															'zerowanie flagi inicjującej wysyłania sekwencji zadań
			End If
		Else																							'jeśli tabela nie zawiera żadnych danych, to:
			Bluetooth.WarningWindow("Brak danych do wysłania.")											'wyświetl okno ostrzegające o braku danych do wysłania
		End If
	End If
	
End Sub

Private Sub BluetoothEvent_AdapterConnected
	
	BtConnectButton.Disable																	'zablokowanie przycisku wyszukiwanie urządzeń bluetooth
	DriverConnectButton.Enable																'odblokowanie przycisku połączenia ze sterownikiem
	
End Sub

Private Sub BluetoothEvent_DriverConnected
	
	DriverDisConnectButton.Enable															'odblokowanie przycisku odłączenia od sterownikiem
	TaskSetupButton.Enable																	'odblokowanie przycisku przełączania na ekran ustawień
	DriverConnectButton.Disable																'zablokowanie przycisku połączenia ze sterownikiem
	ProgressDialogHide																		'ukrycie okna postępu podłączania
	Bluetooth.InfoWindow("Sterownik podłączony.")											'wyświetlenie okna informującego o nawiązaniu połaczenia ze sterownikiem
	
End Sub

Private Sub BluetoothEvent_DriverDisConnect
	
	DriverConnectButton.Enable																'odblokowanie przycisku połączenia ze sterownikiem
	DriverDisConnectButton.Disable															'zablokowanie przycisku odłączenia od sterownikiem
	TaskSetupButton.Disable																	'zablokowanie przycisku przełączenia na ekran ustawień
	ProgressDialogHide																		'ukrycie okna postępu podłączania
	Bluetooth.InfoWindow("Sterownik odłączony.")											'wyświetlenie okna informującego o zerwaniu połączenia
	
End Sub

#End Region

#Region JobScreen

Private Sub ShowJobScreen
	
	Activity.RemoveAllViews																		'usunięcie wszystkich elementów z ekranu
	Activity.LoadLayout("JobScreen")															'załadaowanie elementów ekranu :JobScreen"
	If TaskSequence.IsInitialized == False Then													'jeśli lista sekwencji zadań nie jest zainicjalizowana to:
		TaskSequence.Initialize																	'inicjalizacja listy sekwencji zadań
	End If
	InsertTaskSequenceToListView																'uzupełnij listę sekwencji zadań
	BackButton.SetImage(LoadBitmap(File.DirAssets, "TaskScreenIco.png"))						'wstawienie ikony do przycisku powrotu na ekran parametrów
	SendTaskSequenceButton.SetImage(LoadBitmap(File.DirAssets, "SendIcon.png"))					'wstawienie ikony do przycisku wysyłania sekwencji zadań
	RunJobButton.SetImage(LoadBitmap(File.DirAssets, "RunJob.png"))								'wstawienie ikony do przycisku uruchamiającego pracęrobota
	StopJobButton.SetImage(LoadBitmap(File.DirAssets, "StopJob.png"))							'wstawienie ikony do przycisku zatrzymującego pracę robota
	TaskSequenceListView.Color = Colors.DarkGray
	
End Sub

Private Sub CreateTaskSequence
	
	Dim TaskSequenceName = "TaskSequence_" & TaskSequenceIndex  As String						'nazwa sekwencji zadań
	Dim TaskTab As Map																			'tabela zadań
	TaskTab.Initialize																			'inicjalizacja tabeli zadań
	
	Dim moves = AxisMovesDataGrid.GetTable As Map												'odczyt danych z tabeli ruchów
	For i = 0 To moves.Size - 1																	'iteracja po kopii danych z tabeli ruchów
		Dim move = moves.GetValueAt(i) As Map													'pobranie danych jednego ruchu
		
		Dim name = move.Get("Name") As String													'pobranie nazwy osi ze sprawdzanego ruchu
		Dim angle =  move.Get("Angle") As String												'pobranie kąta - || -
		Dim speed = move.Get("Speed") As String													'pobranie prędkości - || -
		Dim dir = move.Get("Dir") As String														'pobranie kierunku - || -
		Dim blend = move.Get("Blend") As String													'pobranie informacji o miksowaniu - || -
		
		Dim RowCopy As Map																		'utworzenie kopi wiersza tabeli ruchów
		RowCopy.Initialize																		'inicjalizacja kopii wiersza tabeli ruchów
		RowCopy.Put("Name", name)																'zapis nazwy osi do kopii wiersza
		RowCopy.Put("Angle", angle)																'zapis kąta osi do kopii wiersza
		RowCopy.Put("Speed", speed)																'zapis prędkości osi do kopii wiersza
		RowCopy.Put("Dir", dir)																	'zapis kierunku osi do kopii wiersza
		RowCopy.Put("Blend", blend)																'zapis informacji o miksowaniu ruchu osi do kopii wiersza
		
		TaskTab.Put(name, RowCopy)																'umieszczenie kopii wiersza w tabeli zadań
	Next	
	If TaskSequence.IsInitialized == False Then													'jeśli lista sekwencji zadań nie jest zainicjalizowana to:
		TaskSequence.Initialize																	'inicjalizacja listy sekwencji zadań
	End If
	TaskSequence.Put(TaskSequenceName, TaskTab)													'zapis tabeli zadań w tabeli pracy
	TaskSequenceIndex = TaskSequenceIndex + 1													'inkrementacja indexu wysyłanej sekwencji zadań
	
End Sub

Private Sub InsertTaskSequenceToListView
	
	For i = 0 To TaskSequence.Size - 1															'iteracja po liście sekwencji zadań
		Dim TaskSequenceName = TaskSequence.GetKeyAt(i) As String								'pobranie nazwy sekwencji zadań
		Dim TaskNames = " " As String															'zmienna zawierać będzie nazwy osi w aktualnej sekwencji zadań
		Dim Task = TaskSequence.Get(TaskSequenceName) As Map									'pobranie zadania z listy sekwencji zadań
		For j = 0 To Task.Size - 1																'iteracja po liście osi w zadaniu
			TaskNames = TaskNames & " " & Task.GetKeyAt(j)										'pobieranie nazwy osi z zadania
		Next
		TaskSequenceListView.AddTwoLines2(TaskSequenceName, TaskNames, TaskSequence.GetValueAt(i))		'wstawienie sekwencji zadań do kontrolki ListView
	Next
	TaskSequenceListView.TwoLinesLayout.Label.TextColor = Colors.RGB(4, 190, 214)				'ustawienie koloru nazwy sekwencji zadań
	TaskSequenceListView.TwoLinesLayout.SecondLabel.TextColor = Colors.White					'ustawienie koloru listy sekwencji zadań
	
End Sub


Private Sub TaskSequenceListView_ItemLongClick (Position As Int, Value As Object)
	
	Dim Del As Object = xui.Msgbox2Async("Usunąć wpis ?", "JOB", "Tak", "", "Nie", LoadBitmap(File.DirAssets, "Question.png"))		'wyświetl okno potwierdzenia usunięcia sekwencji zadań
	Wait For(Del) Msgbox_Result (Result As Int)
	If Result == xui.DialogResponse_Positive Then
		TaskSequenceListView.RemoveAt(Position)													'usuń pozycję z listy
		TaskSequence.Remove(TaskSequence.GetKeyAt(Position))									'usuń wpis z tabeli sekwencji zadań
	End If
	
End Sub


Private Sub SendTaskSequenceButton_Click
	
	IsTaskSequenceSending = True																'zainicjowano wysyłanie danych
	Bluetooth.SendStatusFrame("1")																'wysłanie rządania podania statusu(inicjowanie komunikacji)
	ProgressDialogShow("Wysyłanie danych do sterownika...")										'okno postępu wysyłania
	
End Sub


Private Sub BackButton_Click
	
	Activity.RemoveAllViews																		'usunięcie wyświetlanych elementów
	Activity.LoadLayout("TaskScreen")															'załaduj ekran ustawień parametrow ruchu
	
End Sub

Private Sub StopJobButton_Click
	
End Sub

Private Sub RunJobButton_Click
	
End Sub

#End Region
