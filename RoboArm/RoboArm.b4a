Build1=Default,b4a.example
File1=AppIcon.png
File10=phoneicon2d.png
File11=Question.png
File12=ramierobota2d.png
File13=SearchBtIco.png
File14=splashscreen.bal
File15=SplashScreen.png
File16=TaskScreen.bal
File17=TaskScreenIco.png
File18=Warning.png
File19=wireleft.png
File2=bluetoothadaptericon.png
File20=wireright.png
File3=ConnectScreen.bal
File4=DefaultButtonImage.png
File5=DriverConnectIco.png
File6=DriverDisConnectIco.png
File7=Error.png
File8=information.png
File9=Layout.bal
FileGroup1=Default Group
FileGroup10=Default Group
FileGroup11=Default Group
FileGroup12=Default Group
FileGroup13=Default Group
FileGroup14=Default Group
FileGroup15=Default Group
FileGroup16=Default Group
FileGroup17=Default Group
FileGroup18=Default Group
FileGroup19=Default Group
FileGroup2=Default Group
FileGroup20=Default Group
FileGroup3=Default Group
FileGroup4=Default Group
FileGroup5=Default Group
FileGroup6=Default Group
FileGroup7=Default Group
FileGroup8=Default Group
FileGroup9=Default Group
Group=Default Group
Library1=core
Library2=serial
Library3=xui
Library4=randomaccessfile
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: https://www.b4x.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="14" android:targetSdkVersion="29"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~CreateResourceFromFile(Macro, Themes.LightTheme)~\n~'End of default text.~\n~
Module1=AsyncStreamsText
Module2=DataGridView
Module3=ImageButton
Module4=Starter
Module5=USART
NumberOfFiles=20
NumberOfLibraries=4
NumberOfModules=5
Version=11.2
@EndOfDesignText@
#Region  Project Attributes 
	#ApplicationLabel: RoboArm
	#VersionCode: 1
	#VersionName: 
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: portrait
	#CanInstallToExternalStorage: False
	#BridgeLogger: True
#End Region

#Region  Activity Attributes 
	#FullScreen: False
	#IncludeTitle: True
#End Region

Sub Process_Globals
	'These global variables will be declared once when the application starts.
	'These variables can be accessed from all modules.
	Private xui As XUI
	Private Bluetooth As USART																'bluetooth
	Private AutoSwitchScreenTimer As Timer													'timer odlicza czas trwania splash screena i przełacza na ekran nawiązywania połączenia
	
	Private Job As Map																		'praca dla robota(praca to sekwencja zadań, może się składać z jednego lub więcej Tasków)
	Private JobIndex = 1 As Int																'index pracy
	
End Sub

Sub Globals
	'These global variables will be redeclared each time the activity is created.
	
	Private BtAdapterIcon As ImageView														'obrazek adaptera bluetooth
	Private PhoneIcon As ImageView															'obrazek telefonu
	Private RobotIcon As ImageView															'obrazek robota
	Private WireLeftIcon As ImageView														'obrazek kabla z wtyczką po lewej stronie
	Private WireRightIcon As ImageView														'obrazek kabla z wtyczką po prawej stronie
	
	Private BtConnectButton As ImageButton													'przycisk wyszukiwania i ustanawiania połączenia z adapterem bluetooth
	Private DriverConnectButton As ImageButton												'przycisk połączenia ze sterownikiem
	Private DriverDisConnectButton As ImageButton											'przycisk do odłączania sterownika
	Private TaskSetupButton As ImageButton													'przełączenie na ekran ustawień parametrów ruchu
	
	Private AcisCLabel As Label
	Private AddToJobButton As Button
	Private AxisACheckBox As CheckBox
	Private AxisALabel As Label
	Private AxisASeekBar As SeekBar
	Private AxisAValue As Label
	Private AxisBCheckBox As CheckBox
	Private AxisBLabel As Label
	Private AxisBSeekBar As SeekBar
	Private AxisBValue As Label
	Private AxisCCheckBox As CheckBox
	Private AxisCSeekBar As SeekBar
	Private AxisCValue As Label
	Private AxisGCheckBox As CheckBox
	Private AxisGLabel As Label
	Private AxisGSeekBar As SeekBar
	Private AxisGValue As Label
	Private AxisMovesDataGrid As DataGridView
	Private AxisTCheckBox As CheckBox
	Private AxisTLabel As Label
	Private AxisTSeekBar As SeekBar
	Private AxisTValue As Label
	Private AxisZCheckBox As CheckBox
	Private AxisZLabel As Label
	Private AxisZSeekBar As SeekBar
	Private AxisZValue As Label
	Private JobScreenButton As Button
	Private SendTaskButton As Button
	Private SpeedLabel As Label
	Private SpeedSeekBar As SeekBar
	Private SpeedValue As Label
	
End Sub

Sub Activity_Create(FirstTime As Boolean)
	
	Bluetooth.Initialize																	'inicjalizacja bluetooth
	AutoSwitchScreenTimer.Initialize("SwitchScreenTimer", 1000)								'incjalizacja timera prełączającego SplashScreen na ConnectScreen
	AutoSwitchScreenTimer.Enabled = True													'uruchomienie timera
	Activity.LoadLayout("SplashScreen")														'ekran powitalny
	
End Sub

Sub Activity_Resume
	
	Bluetooth.Run																			'uruchomienie bluetooth

End Sub

Sub Activity_Pause (UserClosed As Boolean)

End Sub

Sub SwitchScreenTimer_Tick
	
	AutoSwitchScreenTimer.Enabled = False													'zatrzymanie timera
	Activity.RemoveAllViews																	'usunięcie wyświetlanych elementów
	Activity.LoadLayout("ConnectScreen")													'załaduj ekran nawiązywania połączenia
	BtConnectButton.SetImage(LoadBitmap(File.DirAssets, "SearchBtIco.png"))					'ustawienie ikony przycisku połączenie z bt
	DriverConnectButton.SetImage(LoadBitmap(File.DirAssets, "DriverConnectIco.png"))		'ustawienie ikony przycisku połaczenia ze sterownikiem
	DriverDisConnectButton.SetImage(LoadBitmap(File.DirAssets, "DriverDisConnectIco.png"))	'ustawienie ikony przycisku odłączania od sterownika
	TaskSetupButton.SetImage(LoadBitmap(File.DirAssets, "TaskScreenIco.png"))				'ustawienie ikony przycisku przełączającego na ekran ustawień parametrów ruchu osi
	 
	
End Sub

#Region ConnectScreen

Private Sub TaskSetupButton_Click
	
	Activity.RemoveAllViews																	'usunięcie wyświetlanych elementów
	
	Activity.LoadLayout("TaskScreen")														'załaduj ekran ustawień parametrow ruchu
	
End Sub

Private Sub DriverDisConnectButton_Click
	
	
	
End Sub

Private Sub DriverConnectButton_Click
	
End Sub

Private Sub BtConnectButton_Click
	
	BtConnectButton.Disable
	Bluetooth.Serch
	
End Sub

#End Region

#Region TaskScreen

Private Sub InsertAngleToLabel(Angle As String, AxisLeter As String)
	
	For Each ViewElement In Activity.GetAllViewsRecursive										'przeszukaj wszystkie elementy na ekranie
		If ViewElement Is Label Then															'jeśli badany element jest typu Label to:
			Dim lv = ViewElement As Label														'zapisz ten element w zmiennej
			If lv.Tag == "lv" & AxisLeter Then													'jesli tag elementu zgadza się z tagiem sendera to:
				lv.Text = Angle & "°"															'wpisz wartość kąta do labelki
			End If
		End If
	Next
	
End Sub

Private Sub InsertAngleToDataGrid(AxisLeter As String)
	
	Dim AngleFromLabel As Int
	Dim AxisDir As Int
	
	For Each ViewElement In Activity.GetAllViewsRecursive									'przeszukaj wszystkie elementy na ekranie
		If ViewElement Is Label Then														'jeśli badany element jest typu Label to:
			Dim lv = ViewElement As Label													'zapisz ten emement w zmiennej
			If lv.Tag == "lv" & AxisLeter Then												'jesli tag elementu zgadza się z tagiem parametru to:
				AngleFromLabel = lv.Text.Replace("°","")									'przepisz wartość kąta z labelki do zmiennej
			End If
		End If
	Next
	
	If AngleFromLabel >= 0 Then																'jeśli wartość kąta większa lub równa 0 to:
		AxisDir = 0																			'ustaw prawy kierunek obrotów
		AxisMovesDataGrid.SetItemValue(AxisLeter, "Angle", AngleFromLabel)					'wstaw kąt osi do tabeli
		Else																				'w przeciwnym razie:
		AxisDir = 1																			'ustaw lewy kierunek obrotów
		AxisMovesDataGrid.SetItemValue(AxisLeter, "Angle", (AngleFromLabel * -1))			'wstaw kąt osi do tabeli
	End If
	
	AxisMovesDataGrid.SetItemValue(AxisLeter, "Dir", AxisDir)								'wstaw kierunek osi do tabeli
	
End Sub

Private Sub CreateJob
	
	Job.Initialize																					'inicjalizacja pracy
	
	Dim JobName = "Job_" & JobIndex  As String														'nazwa pracy
	Dim TaskTab = AxisMovesDataGrid.GetTable As Map													'pobranie wszystkich danych z tabeli
	Job.Put(JobName, TaskTab)																		'przeniesienie zadania do pracy(Task->JOB)
	JobIndex = JobIndex + 1
	
End Sub

Private Sub SendTaskButton_Click
	
	Dim SendingData As List																			'lista danych do wysłania
	SendingData.Initialize																			'inicjalizacja listy
	Dim TaskTab = AxisMovesDataGrid.GetTable As Map													'pobranie wszystkich danych z tabeli
	Dim Row As Map																					'dane wiersza tabeli										
	
	If TaskTab.Size > 0 Then																		'Czy tabela zawiera dane ? Jeśli tak to :
		For i = 0 To TaskTab.Size - 1																'iteracja po tabeli
			Row = TaskTab.GetValueAt(i)																'pobranie wiersza z tabeli
			Dim IsBlend = Row.Get("Blend") As String												'odczyt informacji o miksowaniu ruchów
			If IsBlend == True And (i + 1) < TaskTab.Size Then										'jeśli w aktualnym wierszu miksowanie ruchów załączone to:
				Log("Send Task")																	'wyślij ramkę typu TASK
				Do Until IsBlend == False															'jeśli miksowanie nadal aktywne 
					i = i + 1																		'oblicz index kolejnego wiersza tabeli
					Row = TaskTab.GetValueAt(i)														'pobierz wiersz z pod obiczonego indeksu
					IsBlend = Row.Get("Blend")														'odczytaj dane o miksowaniu ruchów
					If IsBlend == True And (i + 1) < TaskTab.Size Then								'jeśli miksowanie załączone i index następnego wiersza nie przekracza liczby wierszy w tabeli to:
						Log("Send Task")															'wyślij ramkę typu TASK
					Else																			'w innym wypadku:
						Log("Send Eask")															'wyślij ramkę typu ETASK (ostatni ruch w ramach TASK)
						IsBlend = False																'wyłącz miksowanie
						Continue																	'zakończ iterację
					End If
				Loop
			Else																					'jeśli miksowanie ruchów wyłączone to:
				Log("Send Move")																	'wyślij ramkę typu MOVE
			End If
		Next																						
	Else																							'W przeciwnym razie:
		xui.MsgboxAsync("Brak danych do wysłania", "BLUETOOTH")										'komunikat-brak danych do wysłania
	End If
	
End Sub

Private Sub AddToJobButton_Click
	
	CreateJob
	
End Sub

Private Sub JobScreenButton_Click
	
End Sub

Private Sub AxisSeekBar_ValueChanged (Value As Int, UserChanged As Boolean)
	
	Dim AxisSeekBar = Sender As SeekBar															'obiekt wywołujący zdarzenie
	Dim AxisName = AxisSeekBar.Tag As String													'litera osi pobrana z tagu
	AxisName = AxisName.SubString(3)
	Dim AxisValue As Int																		'wartość suwaka kąta osi
	
	For Each ViewElement In Activity.GetAllViewsRecursive										'przeszukaj wszystkie elementy na ekranie
		If ViewElement Is SeekBar Then															'jeśli badany element jest typu SeekBar to:
			Dim sb = ViewElement As SeekBar														'zapisz ten element w zmiennej
			If sb.Tag == "sbv" & AxisName Then													'jesli tag elementu zgadza się z tagiem sendera to:
				AxisValue = sb.Value + (-90)													'oblicz kąt
			End If
		End If
	Next
	
	InsertAngleToLabel(AxisValue, AxisName)														'wstawienie wartości kąta do odpowiedniej labelki
	InsertAngleToDataGrid(AxisName)																'wstawianie kąta osi do tabeli
	
End Sub

Private Sub AxisCheckBox_CheckedChange(Checked As Boolean)
	
	Dim AxisCheckBox = Sender As CheckBox														'obiekt wywołujący zdarzenie
	Dim AxisName = AxisCheckBox.Tag As String													'litera osi pobrana z tagu
	Dim AxisAngle = 0 As Int																	'kąt osi
	Dim AxisDir  = 0 As Int																		'kierunek osi
	Dim DataForRow As List																		'lista danych dla wiersza
	DataForRow.Initialize																		'inicjalizacja listy
	
	If AxisMovesDataGrid.IsRowExist("Oś " & AxisName) == False Then								'jeśli wiersza jeszcze nie ma to:
		DataForRow.Add("Oś " & AxisName)														'dodaj nazwę osi do listy
		DataForRow.Add(AxisAngle)																'dodaj kąt osi do listy
		DataForRow.Add(SpeedSeekBar.Value)														'dodaj prędkość osi do listy
		DataForRow.Add(AxisDir)																	'dodaj kierunek osi do listy
		DataForRow.Add("1")																		'dodaj informację ołączeniu ruchów do listy
		AxisMovesDataGrid.InsertRow(DataForRow)													'wstaw wiersz
	Else																						'jeśli wiersz istnieje to:
		AxisMovesDataGrid.DeleteRow(AxisName)													'usuń wiersz
	End If
	
	InsertAngleToDataGrid(AxisName)																'wstaw kąt osi do tabeli
	
End Sub

Private Sub SpeedSeekBar_ValueChanged (Value As Int, UserChanged As Boolean)
	
	AxisMovesDataGrid.SetItemValue("Z", "Speed", Value)											'wtawienie prędkości osi Z Do tabeli
	AxisMovesDataGrid.SetItemValue("A", "Speed", Value)											'wtawienie prędkości osi A Do tabeli
	AxisMovesDataGrid.SetItemValue("B", "Speed", Value)											'wtawienie prędkości osi B Do tabeli
	AxisMovesDataGrid.SetItemValue("C", "Speed", Value)											'wtawienie prędkości osi C  Do tabeli
	AxisMovesDataGrid.SetItemValue("G", "Speed", Value)											'wtawienie prędkości osi G  Do tabeli
	AxisMovesDataGrid.SetItemValue("T", "Speed", Value)											'wtawienie prędkości osi T Do tabeli
	
End Sub

#End Region




